package net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.other

import net.minecraft.client.gui.ScaledResolution
import net.minecraft.network.Packet
import net.minecraft.network.play.client.C03PacketPlayer
import net.minecraft.network.play.client.C0FPacketConfirmTransaction
import net.minecraft.network.play.INetHandlerPlayServer
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.Render2DEvent
import net.ccbluex.liquidbounce.event.TickEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.DisablerMode
import net.ccbluex.liquidbounce.utils.*
import net.ccbluex.liquidbounce.features.value.BoolValue

class TimerBalance: DisablerMode("TimerBalance") {

    private val packets = mutableListOf<Packet<INetHandlerPlayServer>>()
    private var balance = 0L
    private var last = 0L
    private var shouldIgnoreC0F = false

    override fun onDisable() {
        balance = 0
        last = 0
        shouldIgnoreC0F = false

        if (mc.thePlayer != null && mc.thePlayer.ticksExisted > 50) {
            packets.forEach {PacketUtils.sendPacketNoEvent(it)}
            packets.clear()
        }
    }

    override fun onPacket(event: PacketEvent) {
        val packet = event.packet

        if (packet is C0FPacketConfirmTransaction) {
            if (shouldIgnoreC0F) {
                event.cancelEvent()
                packets.add(packet)
            } else if (!packets.isEmpty()) {
                event.cancelEvent()
                packets.add(packet)

                PacketUtils.sendPacketNoEvent(packets.removeAt(0))
            }
        }

        if (packet is C03PacketPlayer) {
            if (last == 0L) {
                last = System.currentTimeMillis()
                return
            }

            if (!packet.isMoving && !packet.rotating)
                event.cancelEvent()

            shouldIgnoreC0F = event.isCancelled

            if (shouldIgnoreC0F) {
                balance -= 50
                return
            }

            balance += 50
            balance -= System.currentTimeMillis() - last

            last = System.currentTimeMillis()
        }
    }

     fun onUpdate() {
        if (mc.thePlayer.ticksExisted % 20 == 0)
            ClientUtils.displayChatMessage("Balance: $balance")
    }

     fun onTick() {
        if (balance >= 49)
            mc.timer.timerSpeed = 1.0F
    }

}